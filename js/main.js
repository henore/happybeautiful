// ==========================================
// Âã§ÊÄ†ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É† - „É°„Ç§„É≥„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÔºàÊï¥ÁêÜÁâàÔºâ
// ==========================================

import { SecureDatabase, CONFIG, Utils } from './config.js';
import { AuthManager, AuthError } from './auth.js';
import UserModule from './user-module.js';

// „É°„Ç§„É≥„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇØ„É©„Çπ
class AttendanceApp {
    constructor() {
        this.database = null;
        this.auth = null;
        this.currentModule = null;
        this.isInitialized = false;
        this.timeUpdateInterval = null;
        
        // „Ç∞„É≠„Éº„Éê„É´„Ç¢„ÇØ„Çª„ÇπÁî®Ôºà„Éá„Éê„ÉÉ„Ç∞„Éª„É°„É≥„ÉÜ„Éä„É≥„ÇπÁî®Ôºâ
        window.attendanceSystem = this;
    }
    
    // =================================
    // „Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ
    // =================================
    
    async init() {
        console.log('üöÄ Âã§ÊÄ†ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†Ëµ∑Âãï v' + CONFIG.version);
        
        try {
            // „Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØÂÆüË°å
            await this.performSecurityCheck();
            
            // „Ç≥„Ç¢„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ
            await this.initializeCore();
            
            // UIÂàùÊúüÂåñ
            this.initializeUI();
            
            // „Çª„ÉÉ„Ç∑„Éß„É≥Âæ©ÂÖÉ„Åæ„Åü„ÅØ„É≠„Ç∞„Ç§„É≥ÁîªÈù¢Ë°®Á§∫
            this.initializeAuth();
            
            this.isInitialized = true;
            console.log('‚úÖ „Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÂÆå‰∫Ü');
            
        } catch (error) {
            console.error('‚ùå „Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÂ§±Êïó:', error);
            this.showCriticalError('„Ç∑„Çπ„ÉÜ„É†„ÅÆÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü', error);
        } finally {
            // „Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØÁîªÈù¢„ÇíÁ¢∫ÂÆü„Å´ÈùûË°®Á§∫
            setTimeout(() => {
                this.hideSecurityCheck();
            }, 100);
        }
    }
    
    async performSecurityCheck() {
        console.log('üîç „Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØÈñãÂßã');
        
        const checks = [
            { name: '„Éñ„É©„Ç¶„Ç∂‰∫íÊèõÊÄß„ÇíÁ¢∫Ë™ç‰∏≠...', delay: 300, check: () => this.checkBrowserCompatibility() },
            { name: '„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„ÇíÁ¢∫Ë™ç‰∏≠...', delay: 300, check: () => this.checkLocalStorage() },
            { name: '„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Éù„É™„Ç∑„Éº„ÇíÁ¢∫Ë™ç‰∏≠...', delay: 300, check: () => this.checkSecurityPolicy() },
            { name: '„Ç∑„Çπ„ÉÜ„É†Ë®≠ÂÆö„ÇíË™≠„ÅøËæº„Åø‰∏≠...', delay: 300, check: () => this.loadSystemConfig() },
            { name: 'ÂàùÊúüÂåñÂÆå‰∫Ü', delay: 200, check: () => true }
        ];
        
        for (const { name, delay, check } of checks) {
            await new Promise(resolve => {
                setTimeout(() => {
                    try {
                        this.updateSecurityStatus(name);
                        const result = check();
                        if (result === false) {
                            throw new Error(`„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØÂ§±Êïó: ${name}`);
                        }
                        resolve(result);
                    } catch (error) {
                        console.error('„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É©„Éº:', error);
                        resolve(true); // „Ç®„É©„Éº„Åß„ÇÇÁ∂öË°å
                    }
                }, delay);
            });
        }
        
        console.log('‚úÖ „Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØÂÆå‰∫Ü');
    }
    
    checkBrowserCompatibility() {
        // ÂøÖË¶Å„Å™„Éñ„É©„Ç¶„Ç∂Ê©üËÉΩ„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        const requiredFeatures = [
            'localStorage' in window,
            'sessionStorage' in window,
            'fetch' in window,
            'crypto' in window && 'getRandomValues' in window.crypto,
            'Promise' in window
        ];
        
        const unsupportedFeatures = requiredFeatures.filter(feature => !feature);
        
        if (unsupportedFeatures.length > 0) {
            throw new Error('„Åä‰Ωø„ÅÑ„ÅÆ„Éñ„É©„Ç¶„Ç∂„ÅØ‰∏ÄÈÉ®„ÅÆÊ©üËÉΩ„Çí„Çµ„Éù„Éº„Éà„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì');
        }
        
        return true;
    }
    
    checkLocalStorage() {
        try {
            const testKey = '__storage_test__';
            localStorage.setItem(testKey, 'test');
            const value = localStorage.getItem(testKey);
            localStorage.removeItem(testKey);
            
            if (value !== 'test') {
                throw new Error('„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„ÅåÊ≠£Â∏∏„Å´Âãï‰Ωú„Åó„Åæ„Åõ„Çì');
            }
            
            return true;
        } catch (error) {
            throw new Error('„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Å´„Ç¢„ÇØ„Çª„Çπ„Åß„Åç„Åæ„Åõ„Çì: ' + error.message);
        }
    }
    
    checkSecurityPolicy() {
        // CSPÔºàContent Security PolicyÔºâ„ÇÑÂÖ∂‰ªñ„ÅÆ„Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®≠ÂÆö„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        const userAgent = navigator.userAgent;
        const isSecureContext = window.isSecureContext;
        
        // ÈñãÁô∫Áí∞Â¢É„Åß„Å™„ÅÑÂ†¥Âêà„ÅØHTTPSÂøÖÈ†à
        if (location.protocol !== 'https:' && 
            !location.hostname.includes('localhost') && 
            !location.hostname.includes('127.0.0.1')) {
            console.warn('‚ö†Ô∏è Êú¨Áï™Áí∞Â¢É„Åß„ÅØHTTPSÊé•Á∂ö„ÇíÊé®Â•®„Åó„Åæ„Åô');
        }
        
        return true;
    }
    
    loadSystemConfig() {
        // „Ç∑„Çπ„ÉÜ„É†Ë®≠ÂÆö„ÅÆÂ¶•ÂΩìÊÄß„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        if (!CONFIG || !CONFIG.name || !CONFIG.version) {
            throw new Error('„Ç∑„Çπ„ÉÜ„É†Ë®≠ÂÆö„Åå‰∏çÊ≠£„Åß„Åô');
        }
        
        return true;
    }
    
    async initializeCore() {
        try {
            console.log('üîß „Ç≥„Ç¢„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÈñãÂßã');
            
            // „Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñ
            console.log('üì¶ „Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñ‰∏≠...');
            this.database = new SecureDatabase();
            
            // Ë™çË®º„Éû„Éç„Éº„Ç∏„É£„ÉºÂàùÊúüÂåñ
            console.log('üîê Ë™çË®º„Éû„Éç„Éº„Ç∏„É£„ÉºÂàùÊúüÂåñ‰∏≠...');
            this.auth = new AuthManager(this.database);
            
            // „Ç∑„Çπ„ÉÜ„É†Áµ±Ë®àÊÉÖÂ†±„ÇíË®òÈå≤
            console.log('üìä „Ç∑„Çπ„ÉÜ„É†Áµ±Ë®àË®òÈå≤‰∏≠...');
            this.recordSystemStats();
            
            console.log('‚úÖ „Ç≥„Ç¢„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÂÆå‰∫Ü');
            
        } catch (error) {
            console.error('‚ùå „Ç≥„Ç¢„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ„Ç®„É©„Éº:', error);
            throw error;
        }
    }
    
    recordSystemStats() {
        try {
            const stats = {
                systemVersion: CONFIG.version,
                userAgent: navigator.userAgent.slice(0, 200),
                screen: {
                    width: screen.width,
                    height: screen.height
                },
                timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
                language: navigator.language,
                timestamp: new Date().toISOString()
            };
            
            this.database.setDirectly('system_stats', stats); // Áõ¥Êé•„Ç¢„ÇØ„Çª„Çπ„Çí‰ΩøÁî®
            console.log('üìä „Ç∑„Çπ„ÉÜ„É†Áµ±Ë®àË®òÈå≤ÂÆå‰∫Ü');
        } catch (error) {
            console.error('„Ç∑„Çπ„ÉÜ„É†Áµ±Ë®àË®òÈå≤„Ç®„É©„Éº:', error);
            // „Ç®„É©„Éº„Åß„ÇÇÂá¶ÁêÜ„ÅØÁ∂öË°å
        }
    }
    
    // =================================
    // UIÂàùÊúüÂåñ
    // =================================
    
    initializeUI() {
        this.setupGlobalEventListeners();
        this.startTimeUpdate();
        this.setupErrorHandling();
        
        console.log('‚úÖ UIÂàùÊúüÂåñÂÆå‰∫Ü');
    }
    
    setupGlobalEventListeners() {
        // „É≠„Ç∞„Ç¢„Ç¶„Éà„Éú„Çø„É≥
        const logoutBtn = document.getElementById('logoutBtn');
        if (logoutBtn) {
            logoutBtn.addEventListener('click', () => this.handleLogout());
        }
        
        // „Éñ„É©„Ç¶„Ç∂Èñâ„Åò„ÇãÊôÇ„ÅÆÁ¢∫Ë™çÔºàÊó•Â†±ÊèêÂá∫ÂÆå‰∫Ü„Åæ„ÅßÔºâ
        window.addEventListener('beforeunload', (e) => {
            if (this.shouldPreventPageUnload()) {
                e.preventDefault();
                e.returnValue = 'ÈÄÄÂã§„Å®Êó•Â†±ÊèêÂá∫„ÅåÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇÊú¨ÂΩì„Å´„Éö„Éº„Ç∏„ÇíÈõ¢„Çå„Åæ„Åô„ÅãÔºü';
                return e.returnValue;
            }
        });
    }
    
    setupErrorHandling() {
        // „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„ÅØÁ∞°Á¥†ÂåñÔºàÁÑ°Èôê„É´„Éº„Éó„ÇíÈò≤„ÅêÔºâ
        window.addEventListener('error', (e) => {
            console.error('„Ç∞„É≠„Éº„Éê„É´„Ç®„É©„Éº:', e.error);
            // „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞„ÅØÈáçË¶Å„Å™„Ç®„É©„Éº„ÅÆ„ÅøË®òÈå≤
            if (e.error && e.error.name !== 'TypeError') {
                try {
                    this.database?.logSecurityEvent('GLOBAL_ERROR', {
                        message: e.message,
                        filename: e.filename,
                        lineno: e.lineno
                    });
                } catch (logError) {
                    // „É≠„Ç∞Ë®òÈå≤„Ç®„É©„Éº„ÅØÁÑ°Ë¶ñ
                }
            }
        });
        
        // Promise rejection handling
        window.addEventListener('unhandledrejection', (e) => {
            console.error('Êú™Âá¶ÁêÜ„ÅÆPromise rejection:', e.reason);
            try {
                this.database?.logSecurityEvent('UNHANDLED_PROMISE_REJECTION', {
                    reason: e.reason?.toString()
                });
            } catch (logError) {
                // „É≠„Ç∞Ë®òÈå≤„Ç®„É©„Éº„ÅØÁÑ°Ë¶ñ
            }
        });
    }
    
    startTimeUpdate() {
        this.updateTime();
        this.timeUpdateInterval = setInterval(() => this.updateTime(), 1000);
    }
    
    updateTime() {
        const now = new Date();
        const timeElement = document.getElementById('currentTime');
        const dateElement = document.getElementById('currentDate');
        
        if (timeElement) {
            timeElement.textContent = now.toLocaleTimeString('ja-JP');
        }
        
        if (dateElement) {
            dateElement.textContent = Utils.formatDate(now);
        }
    }
    
    // =================================
    // Ë™çË®º„ÉªÁîªÈù¢ÈÅ∑Áßª
    // =================================
    
    initializeAuth() {
        try {
            console.log('üîê Ë™çË®ºÂàùÊúüÂåñÈñãÂßã');
            
            if (this.auth && this.auth.currentUser) {
                console.log('üìã Êó¢Â≠ò„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÊ§úÂá∫:', this.auth.currentUser.name);
                this.showDashboard();
            } else {
                console.log('üîë „É≠„Ç∞„Ç§„É≥ÁîªÈù¢„ÇíË°®Á§∫');
                this.showLoginScreen();
            }
            
            console.log('‚úÖ Ë™çË®ºÂàùÊúüÂåñÂÆå‰∫Ü');
        } catch (error) {
            console.error('‚ùå Ë™çË®ºÂàùÊúüÂåñ„Ç®„É©„Éº:', error);
            // „Ç®„É©„Éº„ÅÆÂ†¥Âêà„ÅØ„É≠„Ç∞„Ç§„É≥ÁîªÈù¢„ÇíË°®Á§∫
            this.showLoginScreen();
        }
    }
    
    showLoginScreen() {
        try {
            console.log('üîë „É≠„Ç∞„Ç§„É≥ÁîªÈù¢Ë°®Á§∫ÈñãÂßã');
            
            const content = document.getElementById('app-content');
            const currentUser = document.getElementById('currentUser');
            const logoutBtn = document.getElementById('logoutBtn');
            
            if (!content) {
                throw new Error('app-contentË¶ÅÁ¥†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
            }
            
            content.innerHTML = this.getLoginHTML();
            
            if (currentUser) currentUser.textContent = '';
            if (logoutBtn) logoutBtn.style.display = 'none';
            
            // „É≠„Ç∞„Ç§„É≥„Éï„Ç©„Éº„É†„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºË®≠ÂÆö
            setTimeout(() => {
                const loginForm = document.getElementById('loginForm');
                if (loginForm) {
                    loginForm.addEventListener('submit', (e) => this.handleLogin(e));
                    console.log('‚úÖ „É≠„Ç∞„Ç§„É≥„Éï„Ç©„Éº„É†„Ç§„Éô„É≥„ÉàË®≠ÂÆöÂÆå‰∫Ü');
                } else {
                    console.warn('‚ö†Ô∏è „É≠„Ç∞„Ç§„É≥„Éï„Ç©„Éº„É†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
                }
                
                // „Éï„Ç©„Éº„Ç´„ÇπË®≠ÂÆö
                const usernameField = document.getElementById('username');
                if (usernameField) {
                    usernameField.focus();
                }
            }, 100);
            
            console.log('‚úÖ „É≠„Ç∞„Ç§„É≥ÁîªÈù¢Ë°®Á§∫ÂÆå‰∫Ü');
            
        } catch (error) {
            console.error('‚ùå „É≠„Ç∞„Ç§„É≥ÁîªÈù¢Ë°®Á§∫„Ç®„É©„Éº:', error);
            this.showCriticalError('„É≠„Ç∞„Ç§„É≥ÁîªÈù¢„ÅÆË°®Á§∫„Å´Â§±Êïó„Åó„Åæ„Åó„Åü', error);
        }
    }
    
    async handleLogin(e) {
        e.preventDefault();
        console.log('üîê „É≠„Ç∞„Ç§„É≥Âá¶ÁêÜÈñãÂßã');
        
        try {
            this.showLoading(true);
            
            const username = document.getElementById('username').value.trim();
            const password = document.getElementById('password').value;
            
            // ÂÖ•ÂäõÂÄ§Ê§úË®º
            if (!username || !password) {
                throw new Error('„É¶„Éº„Ç∂„ÉºID„Å®„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            }
            
            // „É≠„Ç∞„Ç§„É≥ÂÆüË°å
            const user = await this.auth.login(username, password);
            
            // ÊàêÂäüÊôÇ„ÅÆÂá¶ÁêÜ
            this.showDashboard();
            this.showNotification(`„Çà„ÅÜ„Åì„Åù„ÄÅ${user.name}„Åï„Çì`, 'success');
            
        } catch (error) {
            console.error('‚ùå „É≠„Ç∞„Ç§„É≥„Ç®„É©„Éº:', error);
            
            if (error instanceof AuthError) {
                this.showNotification(error.message, 'danger');
            } else {
                this.showNotification('„É≠„Ç∞„Ç§„É≥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü', 'danger');
            }
            
            // „Éï„Ç©„Éº„É†„É™„Çª„ÉÉ„Éà
            const passwordField = document.getElementById('password');
            if (passwordField) {
                passwordField.value = '';
                passwordField.focus();
            }
            
        } finally {
            this.showLoading(false);
        }
    }
    
    showDashboard() {
        try {
            if (!this.auth.currentUser) {
                console.error('„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
                this.showLoginScreen();
                return;
            }
            
            console.log('üìä „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâË°®Á§∫ÈñãÂßã:', this.auth.currentUser.name);
            
            // „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥Êõ¥Êñ∞
            this.updateNavigation();
            
            // Ê®©ÈôêÂà•„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâË°®Á§∫
            this.loadModuleByRole(this.auth.currentUser.role);
            
        } catch (error) {
            console.error('„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâË°®Á§∫„Ç®„É©„Éº:', error);
            this.showError('„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„ÅÆË°®Á§∫„Å´Â§±Êïó„Åó„Åæ„Åó„Åü', error);
        }
    }
    
    updateNavigation() {
        const currentUser = document.getElementById('currentUser');
        const logoutBtn = document.getElementById('logoutBtn');
        
        const user = this.auth.currentUser;
        currentUser.textContent = `${user.name} (${this.getRoleDisplayName(user.role)})`;
        logoutBtn.style.display = 'block';
    }
    
    async loadModuleByRole(role) {
        try {
            console.log('üì¶ „É¢„Ç∏„É•„Éº„É´Ë™≠„ÅøËæº„ÅøÈñãÂßã:', role);
            
            // Êó¢Â≠ò„É¢„Ç∏„É•„Éº„É´„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
            if (this.currentModule && typeof this.currentModule.cleanup === 'function') {
                this.currentModule.cleanup();
            }
            
            switch (role) {
                case 'user':
                    console.log('üë§ Âà©Áî®ËÄÖ„É¢„Ç∏„É•„Éº„É´Ë™≠„ÅøËæº„Åø‰∏≠...');
                    this.currentModule = new UserModule(this);
                    await this.currentModule.init();
                    console.log('‚úÖ Âà©Áî®ËÄÖ„É¢„Ç∏„É•„Éº„É´Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü');
                    break;
                
                 case 'staff':
                    console.log('üë• „Çπ„Çø„ÉÉ„Éï„É¢„Ç∏„É•„Éº„É´Ë™≠„ÅøËæº„Åø‰∏≠...');
                    try {
                        console.log('üì¶ staff-module.js „Çí„Ç§„É≥„Éù„Éº„Éà‰∏≠...');
                        const { default: StaffModule } = await import('./staff-module.js');
                        console.log('‚úÖ „Çπ„Çø„ÉÉ„Éï„É¢„Ç∏„É•„Éº„É´„Ç§„É≥„Éù„Éº„ÉàÊàêÂäü');
                        this.currentModule = new StaffModule(this);
                        await this.currentModule.init();
                        console.log('‚úÖ „Çπ„Çø„ÉÉ„Éï„É¢„Ç∏„É•„Éº„É´ÂàùÊúüÂåñÂÆå‰∫Ü');
                    } catch (error) {
                        console.error('‚ùå „Çπ„Çø„ÉÉ„Éï„É¢„Ç∏„É•„Éº„É´„Ç®„É©„Éº:', error);
                        console.warn('‚ö†Ô∏è „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: Á∞°Êòì„Çπ„Çø„ÉÉ„ÉïÁîªÈù¢„ÇíË°®Á§∫');
                        this.showSimpleStaffDashboard();
                    }
                    break;
                
                case 'admin':
                    console.log('üîß ÁÆ°ÁêÜËÄÖ„É¢„Ç∏„É•„Éº„É´Ë™≠„ÅøËæº„Åø‰∏≠...');
                    try {
                        console.log('üì¶ admin-module.js „Çí„Ç§„É≥„Éù„Éº„Éà‰∏≠...');
                        const { default: AdminModule } = await import('./admin-module.js');
                        console.log('‚úÖ ÁÆ°ÁêÜËÄÖ„É¢„Ç∏„É•„Éº„É´„Ç§„É≥„Éù„Éº„ÉàÊàêÂäü');
                        this.currentModule = new AdminModule(this);
                        await this.currentModule.init();
                        console.log('‚úÖ ÁÆ°ÁêÜËÄÖ„É¢„Ç∏„É•„Éº„É´ÂàùÊúüÂåñÂÆå‰∫Ü');
                    } catch (error) {
                        console.error('‚ùå ÁÆ°ÁêÜËÄÖ„É¢„Ç∏„É•„Éº„É´„Ç®„É©„Éº:', error);
                        console.warn('‚ö†Ô∏è „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: Á∞°ÊòìÁÆ°ÁêÜÁîªÈù¢„ÇíË°®Á§∫');
                        this.showSimpleAdminDashboard();
                    }
                    break;
                
                default:
                    throw new Error('‰∏çÊòé„Å™ÂΩπÂâ≤: ' + role);
            }
            
        } catch (error) {
            console.error('‚ùå „É¢„Ç∏„É•„Éº„É´Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
            this.showError('ÁîªÈù¢„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü', error);
        }
    }
    
    handleLogout() {
        // „É¶„Éº„Ç∂„Éº„É¢„Ç∏„É•„Éº„É´„Åå„ÅÇ„ÇãÂ†¥Âêà„ÄÅ„É≠„Ç∞„Ç¢„Ç¶„ÉàÂèØËÉΩ„Åã„ÉÅ„Çß„ÉÉ„ÇØ
        if (this.currentModule && typeof this.currentModule.canLogout === 'function') {
            if (!this.currentModule.canLogout()) {
                this.showNotification('ÈÄÄÂã§Âæå„ÄÅÊó•Â†±ÊèêÂá∫„ÅåÂÆå‰∫Ü„Åô„Çã„Å®„É≠„Ç∞„Ç¢„Ç¶„Éà„Åß„Åç„Åæ„Åô', 'warning');
                return;
            }
        }
        
        if (!confirm('„É≠„Ç∞„Ç¢„Ç¶„Éà„Åó„Åæ„Åô„ÅãÔºü')) {
            return;
        }
        
        console.log('üö™ „É≠„Ç∞„Ç¢„Ç¶„ÉàÂá¶ÁêÜÈñãÂßã');
        
        // „É¢„Ç∏„É•„Éº„É´„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
        if (this.currentModule && typeof this.currentModule.cleanup === 'function') {
            this.currentModule.cleanup();
        }
        this.currentModule = null;
        
        // Ë™çË®º„ÇØ„É™„Ç¢Ôºà„Çª„ÉÉ„Ç∑„Éß„É≥Áõ£Ë¶ñ„ÅØÁÑ°ÂäπÂåñÔºâ
        this.auth.logout();
        
        // ÁîªÈù¢„Çí„ÇØ„É™„Ç¢
        this.showLoginScreen();
        this.showNotification('„É≠„Ç∞„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü', 'info');
    }  
    
    updateSecurityStatus(text) {
        const element = document.getElementById('securityStatus');
        if (element) {
            element.textContent = text;
        }
    }
    
    hideSecurityCheck() {
        try {
            const element = document.getElementById('securityCheck');
            if (element) {
                element.style.display = 'none';
                console.log('‚úÖ „Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØÁîªÈù¢„ÇíÈùûË°®Á§∫„Å´„Åó„Åæ„Åó„Åü');
            } else {
                console.warn('‚ö†Ô∏è „Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØË¶ÅÁ¥†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
            }
        } catch (error) {
            console.error('‚ùå „Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØÈùûË°®Á§∫„Ç®„É©„Éº:', error);
        }
    }
    
    showLoading(show) {
        const loading = document.getElementById('loading');
        if (loading) {
            loading.style.display = show ? 'flex' : 'none';
        }
    }
    
    showNotification(message, type = 'info', duration = 3000) {
        try {
            const notification = document.createElement('div');
            notification.className = `alert alert-${type} alert-dismissible fade show notification`;
            
            // HTML„Ç®„Çπ„Ç±„Éº„ÉóÂá¶ÁêÜ
            const safeMessage = message.replace(/</g, '&lt;').replace(/>/g, '&gt;');
            
            notification.innerHTML = `
                <i class="fas fa-${this.getNotificationIcon(type)}"></i> 
                ${safeMessage}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Èñâ„Åò„Çã"></button>
            `;
            
            const container = document.getElementById('notifications');
            if (container) {
                container.appendChild(notification);
                
                // Ëá™ÂãïÂâäÈô§
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.remove();
                    }
                }, duration);
            }
            
            // „É≠„Ç∞Ë®òÈå≤Ôºà„Ç®„É©„ÉºÈÄöÁü•‰ª•Â§ñÔºâ
            if (type !== 'danger') {
                try {
                    this.database?.logSecurityEvent('NOTIFICATION_SHOWN', {
                        message: message,
                        type: type
                    });
                } catch (logError) {
                    // „É≠„Ç∞„Ç®„É©„Éº„ÅØÁÑ°Ë¶ñ
                }
            }
        } catch (error) {
            console.error('ÈÄöÁü•Ë°®Á§∫„Ç®„É©„Éº:', error);
        }
    }
    
    getNotificationIcon(type) {
        const icons = {
            'success': 'check-circle',
            'danger': 'exclamation-triangle',
            'warning': 'exclamation-circle',
            'info': 'info-circle'
        };
        return icons[type] || 'info-circle';
    }
    
    showError(message, error) {
        const content = document.getElementById('app-content');
        const errorDetails = error instanceof Error ? error.message : String(error);
        
        content.innerHTML = `
            <div class="alert alert-danger text-center">
                <h4><i class="fas fa-exclamation-triangle"></i> „Ç∑„Çπ„ÉÜ„É†„Ç®„É©„Éº</h4>
                <p>${message}</p>
                <small class="text-muted">„Ç®„É©„ÉºË©≥Á¥∞: ${errorDetails}</small>
                <hr>
                <button class="btn btn-primary" onclick="location.reload()">
                    <i class="fas fa-refresh"></i> „Éö„Éº„Ç∏„ÇíÂÜçË™≠„ÅøËæº„Åø
                </button>
            </div>
        `;
        
        // „Ç®„É©„Éº„É≠„Ç∞Ë®òÈå≤
        this.database?.logSecurityEvent('SYSTEM_ERROR', {
            message: message,
            error: errorDetails,
            stack: error?.stack
        });
    }
    
    showCriticalError(message, error) {
        document.body.innerHTML = `
            <div class="container mt-5">
                <div class="alert alert-danger text-center">
                    <h2><i class="fas fa-exclamation-triangle"></i> ÈáçÂ§ß„Å™„Ç®„É©„Éº</h2>
                    <p>${message}</p>
                    <small>„Ç®„É©„Éº: ${error?.message || error}</small>
                    <hr>
                    <button class="btn btn-primary" onclick="location.reload()">
                        „Éö„Éº„Ç∏„ÇíÂÜçË™≠„ÅøËæº„Åø
                    </button>
                </div>
            </div>
        `;
    }
    
    getRoleDisplayName(role) {
        const roleNames = {
            'user': 'Âà©Áî®ËÄÖ',
            'staff': 'Á§æÂì°',
            'admin': 'ÁÆ°ÁêÜËÄÖ'
        };
        return roleNames[role] || role;
    }
    
    shouldPreventPageUnload() {
        // „É¶„Éº„Ç∂„Éº„É¢„Ç∏„É•„Éº„É´„Åß„Å™„ÅÑÂ†¥Âêà„ÅØÈò≤Ê≠¢„Åó„Å™„ÅÑ
        if (!this.currentModule || this.currentModule.constructor.name !== 'UserModule') {
            return false;
        }
        
        // Ë™çË®º„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØÈò≤Ê≠¢„Åó„Å™„ÅÑ
        if (!this.auth || !this.auth.currentUser) {
            return false;
        }
        
        try {
            const today = new Date().toDateString();
            const userId = this.auth.currentUser.id;
            
            // Âá∫Âã§Ë®òÈå≤„Å®Êó•Â†±„ÇíÂèñÂæó
            const attendance = this.currentModule.getAttendance(userId, today);
            const hasReport = this.currentModule.getDailyReport(userId, today);
            
            // Âá∫Âã§„Åó„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØÈò≤Ê≠¢„Åó„Å™„ÅÑ
            if (!attendance || !attendance.clockIn) {
                return false;
            }
            
            // ÈÄÄÂã§Ê∏à„Åø „Åã„Å§ Êó•Â†±ÊèêÂá∫Ê∏à„Åø„ÅÆÂ†¥Âêà„ÅØÈò≤Ê≠¢„Åó„Å™„ÅÑ
            if (attendance.clockOut && hasReport) {
                return false;
            }
            
            // „Åù„ÅÆ‰ªñ„ÅÆÂ†¥ÂêàÔºàÂá∫Âã§‰∏≠„ÄÅ„Åæ„Åü„ÅØÈÄÄÂã§Ê∏à„Åø„Å†„ÅåÊó•Â†±Êú™ÊèêÂá∫Ôºâ„ÅØÈò≤Ê≠¢„Åô„Çã
            return true;
            
        } catch (error) {
            console.error('„Éö„Éº„Ç∏Èõ¢ËÑ±Èò≤Ê≠¢„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É©„Éº:', error);
            // „Ç®„É©„Éº„ÅÆÂ†¥Âêà„ÅØÂÆâÂÖ®ÂÅ¥„Å´ÂÄí„Åó„Å¶Èò≤Ê≠¢„Åó„Å™„ÅÑ
            return false;
        }
    }
    
    // =================================
    // „Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜ„Éª„Éá„Éê„ÉÉ„Ç∞Ê©üËÉΩ
    // =================================
    
    getSystemInfo() {
        return {
            version: CONFIG.version,
            isInitialized: this.isInitialized,
            currentUser: this.auth?.currentUser,
            currentModule: this.currentModule?.constructor.name,
            databaseSize: this.database?.getDatabaseSize(),
            securityInfo: this.auth?.getSecurityInfo(),
            uptime: this.getUptime()
        };
    }
    
    getUptime() {
        try {
            const startTime = this.database?.getDirectly('system_stats')?.timestamp; // Áõ¥Êé•„Ç¢„ÇØ„Çª„Çπ„Çí‰ΩøÁî®
            if (!startTime) return 0;
            
            return Date.now() - new Date(startTime).getTime();
        } catch (error) {
            console.error('Á®ºÂÉçÊôÇÈñìÂèñÂæó„Ç®„É©„Éº:', error);
            return 0;
        }
    }
    
    // „Éá„Éê„ÉÉ„Ç∞Áî®„ÅÆ„Éá„Éº„Çø„Ç®„ÇØ„Çπ„Éù„Éº„Éà
    exportSystemData() {
        if (!this.auth?.hasPermission('all')) {
            throw new Error('ÁÆ°ÁêÜËÄÖÊ®©Èôê„ÅåÂøÖË¶Å„Åß„Åô');
        }
        
        const data = {
            systemInfo: this.getSystemInfo(),
            timestamp: new Date().toISOString(),
            exportedBy: this.auth.currentUser?.id
        };
        
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        
        const link = document.createElement('a');
        link.href = url;
        link.download = `attendance_system_export_${Date.now()}.json`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        URL.revokeObjectURL(url);
        
        this.database.logSecurityEvent('SYSTEM_DATA_EXPORTED', {
            userId: this.auth.currentUser?.id
        });
    }
    
    // =================================
    // HTML„ÉÜ„É≥„Éó„É¨„Éº„Éà
    // =================================
    
    getLoginHTML() {
        return `
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <div class="custom-card">
                        <div class="custom-card-header text-center">
                            <h4><i class="fas fa-user-circle"></i> „É≠„Ç∞„Ç§„É≥</h4>
                            <small>Âã§ÊÄ†ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É† v${CONFIG.version}</small>
                        </div>
                        <div class="card-body">
                            <form id="loginForm">
                                <div class="mb-3">
                                    <label for="username" class="form-label">
                                        <i class="fas fa-user"></i> „É¶„Éº„Ç∂„ÉºID
                                    </label>
                                    <input type="text" class="form-control" id="username" required 
                                           placeholder="„É¶„Éº„Ç∂„ÉºID„ÇíÂÖ•Âäõ" autocomplete="username">
                                </div>
                                <div class="mb-3">
                                    <label for="password" class="form-label">
                                        <i class="fas fa-lock"></i> „Éë„Çπ„ÉØ„Éº„Éâ
                                    </label>
                                    <input type="password" class="form-control" id="password" required 
                                           placeholder="„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ" autocomplete="current-password">
                                </div>
                                <button type="submit" class="btn btn-primary w-100 btn-lg">
                                    <i class="fas fa-sign-in-alt"></i> „É≠„Ç∞„Ç§„É≥
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    
    // =================================
    // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
    // =================================
    
    destroy() {
        // „Çø„Ç§„Éû„Éº„ÇØ„É™„Ç¢
        if (this.timeUpdateInterval) {
            clearInterval(this.timeUpdateInterval);
            this.timeUpdateInterval = null;
        }
        
        // „É¢„Ç∏„É•„Éº„É´„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
        if (this.currentModule && typeof this.currentModule.cleanup === 'function') {
            this.currentModule.cleanup();
        }
        
        // Ë™çË®º„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
        if (this.auth) {
            this.auth.logout();
        }
        
        // „Éá„Éº„Çø„Éô„Éº„Çπ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
        if (this.database) {
            this.database.cleanup();
        }
        
        // „Ç∞„É≠„Éº„Éê„É´ÂèÇÁÖßÂâäÈô§
        delete window.attendanceSystem;
        
        console.log('üßπ „Ç∑„Çπ„ÉÜ„É†„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÂÆå‰∫Ü');
    }
}

// =================================
// „Ç∑„Çπ„ÉÜ„É†Ëµ∑Âãï
// =================================

document.addEventListener('DOMContentLoaded', async () => {
    console.log('üìÑ DOMË™≠„ÅøËæº„ÅøÂÆå‰∫Ü');
    
    try {
        console.log('üöÄ „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥Ëµ∑ÂãïÈñãÂßã');
        const app = new AttendanceApp();
        await app.init();
        console.log('‚úÖ „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥Ëµ∑ÂãïÂÆå‰∫Ü');
        
    } catch (error) {
        console.error('‚ùå „Ç∑„Çπ„ÉÜ„É†Ëµ∑ÂãïÂ§±Êïó:', error);
        
        // Ë©≥Á¥∞„Å™„Ç®„É©„ÉºÊÉÖÂ†±„Çí„É≠„Ç∞Âá∫Âäõ
        console.error('„Ç®„É©„ÉºË©≥Á¥∞:', {
            message: error.message,
            stack: error.stack,
            name: error.name
        });
        
        // „Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØÁîªÈù¢„ÇíÂº∑Âà∂ÈùûË°®Á§∫
        try {
            const securityCheck = document.getElementById('securityCheck');
            if (securityCheck) {
                securityCheck.style.display = 'none';
            }
        } catch (hideError) {
            console.error('„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØÈùûË°®Á§∫„Ç®„É©„Éº:', hideError);
        }
        
        // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÁîªÈù¢Ë°®Á§∫
        document.body.innerHTML = `
            <div class="container mt-5">
                <div class="alert alert-danger text-center">
                    <h2><i class="fas fa-exclamation-triangle"></i> „Ç∑„Çπ„ÉÜ„É†Ëµ∑ÂãïÂ§±Êïó</h2>
                    <p>Âã§ÊÄ†ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†„ÅÆËµ∑Âãï„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ</p>
                    <small class="d-block mt-2">„Ç®„É©„Éº: ${error.message}</small>
                    <hr>
                    <button class="btn btn-primary me-2" onclick="location.reload()">
                        <i class="fas fa-sync"></i> ÂÜçË©¶Ë°å
                    </button>
                    <button class="btn btn-secondary" onclick="console.clear(); location.reload()">
                        <i class="fas fa-broom"></i> „Ç≠„É£„ÉÉ„Ç∑„É•„ÇØ„É™„Ç¢ÂæåÂÜçË©¶Ë°å
                    </button>
                </div>
            </div>
        `;
    }
});

// Ëµ∑ÂãïÂâç„ÅÆÊ∫ñÂÇô„ÉÅ„Çß„ÉÉ„ÇØ
console.log('üîç Ëµ∑ÂãïÂâç„ÉÅ„Çß„ÉÉ„ÇØ:', {
    localStorage: 'localStorage' in window,
    sessionStorage: 'sessionStorage' in window,
    bootstrap: typeof bootstrap !== 'undefined'
});

// CSPÂØæÂøú: inline script„ÅÆÂâäÈô§
export { AttendanceApp };